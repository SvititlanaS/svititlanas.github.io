// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ Ringostat –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
(function (d, s, u, e, p) {
  p = d.getElementsByTagName(s)[0];
  e = d.createElement(s);
  e.async = 1;
  e.src = u;
  p.parentNode.insertBefore(e, p);
})(document, 'script', 'https://script.ringostat.com/v4/1b/1b754cb63e621f14d71ac9233d0ba04a7fd8a22a.js');

// –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Ringostat-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ pageview
var pw = function () {
  if (typeof (ringostatAnalytics) === "undefined") {
    setTimeout(pw, 100); // –Ø–∫—â–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ 100 –º—Å
  } else {
    ringostatAnalytics.sendHit('pageview');
  }
};
pw();

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
  const burger = document.getElementById("burger");
  const menu = document.getElementById("navLinks");
  const navLinks = document.querySelectorAll(".nav-links a");

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–µ–Ω—é –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
  burger?.addEventListener("click", () => {
    menu?.classList.toggle("active");
  });

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é
  navLinks.forEach(link => {
    link.addEventListener("click", () => {
      menu?.classList.remove("active");
    });
  });

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—ñ–Ω—ñ –¥–æ –Ω–∞–≤–±–∞—Ä—É –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
  const navbar = document.querySelector(".navbar");
  window.addEventListener("scroll", () => {
    if (window.scrollY > 20) {
      navbar?.classList.add("scrolled");
    } else {
      navbar?.classList.remove("scrolled");
    }
  });
});

// üìû –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –¥–∑–≤—ñ–Ω–æ–∫
async function sendCall(authKey, phoneNumber) {
  try {
    const response = await fetch('https://stepuraserhii-github-io.onrender.com/api/call', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ authKey, phoneNumber })
    });
    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É:', result);
    alert('‚úÖ –î–∑–≤—ñ–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É:', error);
    alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞!');
  }
}

// üîÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–∞ —Å—Ö–µ–º–∏

document.getElementById('connectButton3')?.addEventListener('click', () => {
  const authKey = document.getElementById('authKey3').value;
  const phoneNumber = document.getElementById('phone3').value;
  const projectId = document.getElementById('projectId3').value;
  const schemeId = document.getElementById('schemeId3').value;
  let manager_dst = document.getElementById('direction3').value;
  const direction = document.getElementById('callType3').value;

  manager_dst = manager_dst === "0" ? 0 : 1;

  connectNumber({ authKey, phoneNumber, projectId, schemeId, direction, manager_dst });
});

document.getElementById('connectButton4')?.addEventListener('click', () => {
  const authKey = document.getElementById('authKey4').value;
  const phoneNumber = document.getElementById('phone4').value;
  const projectId = document.getElementById('projectId4').value;
  const sipLogin = document.getElementById('sipLogin4').value;
  let manager_dst = document.getElementById('direction4').value;
  const direction = document.getElementById('callType4').value;

  manager_dst = manager_dst === "0" ? 0 : 1;

  connectNumber({ authKey, phoneNumber, projectId, sipLogin, direction, manager_dst });
});

async function connectNumber(data) {
  try {
    const response = await fetch('https://stepuraserhii-github-io.onrender.com/api/connect', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    const result = await response.json();
    console.log('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', result);
    alert('‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:', error);
    alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É!');
  }
}